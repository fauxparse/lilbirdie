generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String           @id @default(cuid())
  name                   String
  email                  String           @unique
  emailVerified          Boolean          @default(false)
  image                  String?
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  accounts               Account[]
  auditLogs              AuditLog[]
  claims                 Claim[]
  friendRequestsReceived FriendRequest[]  @relation("ReceiverUser")
  friendRequestsSent     FriendRequest[]  @relation("RequesterUser")
  friendsReceived        Friendship[]     @relation("FriendUser")
  friendsInitiated       Friendship[]     @relation("UserFriends")
  occasions              Occasion[]
  profile                Profile?
  sessions               Session[]
  editableWishlists      WishlistEditor[]
  wishlists              Wishlist[]

  @@map("users")
}

model Profile {
  id                String    @id @default(cuid())
  userId            String    @unique
  birthday          DateTime?
  preferredCurrency String    @default("NZD")
  theme             String    @default("system")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id           String    @id @default(cuid())
  userId       String
  accountId    String
  providerId   String
  accessToken  String?
  refreshToken String?
  password     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  expiresAt    DateTime?
  idToken      String?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("accounts")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@map("verifications")
}

model Wishlist {
  id          String           @id @default(cuid())
  title       String
  description String?
  permalink   String           @unique
  privacy     WishlistPrivacy  @default(FRIENDS_ONLY)
  isDefault   Boolean          @default(false)
  isDeleted   Boolean          @default(false)
  ownerId     String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
  claims      Claim[]
  editors     WishlistEditor[]
  items       WishlistItem[]
  owner       User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("wishlists")
}

model WishlistItem {
  id          String    @id @default(cuid())
  name        String
  description String?
  url         String?
  imageUrl    String?
  price       Decimal?
  currency    String    @default("NZD")
  priority    Int       @default(0)
  tags        String[]
  isDeleted   Boolean   @default(false)
  wishlistId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  claims      Claim[]
  wishlist    Wishlist  @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  @@map("wishlist_items")
}

model Friendship {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  createdAt DateTime @default(now())
  friend    User     @relation("FriendUser", fields: [friendId], references: [id], onDelete: Cascade)
  user      User     @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@map("friendships")
}

model FriendRequest {
  id          String              @id @default(cuid())
  email       String
  requesterId String
  receiverId  String?
  status      FriendRequestStatus @default(PENDING)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  receiver    User?               @relation("ReceiverUser", fields: [receiverId], references: [id])
  requester   User                @relation("RequesterUser", fields: [requesterId], references: [id], onDelete: Cascade)

  @@unique([requesterId, email])
  @@map("friend_requests")
}

model WishlistEditor {
  id         String   @id @default(cuid())
  wishlistId String
  userId     String
  canEdit    Boolean  @default(true)
  canDelete  Boolean  @default(false)
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, userId])
  @@map("wishlist_editors")
}

model Claim {
  id         String       @id @default(cuid())
  itemId     String
  wishlistId String
  userId     String
  sent       Boolean      @default(false)
  sentAt     DateTime?
  createdAt  DateTime     @default(now())
  item       WishlistItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  wishlist   Wishlist     @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  @@unique([itemId, userId])
  @@map("claims")
}

model Occasion {
  id          String       @id @default(cuid())
  title       String
  date        DateTime
  type        OccasionType
  isRecurring Boolean      @default(true)
  startYear   Int?
  isDeleted   Boolean      @default(false)
  ownerId     String
  entityType  EntityType?
  entityId    String?
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  owner       User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("occasions")
}

model WebSocketConnection {
  id          String   @id @default(cuid())
  socketId    String   @unique
  userId      String?
  wishlistId  String?
  connectedAt DateTime @default(now())
  lastPing    DateTime @default(now())

  @@map("websocket_connections")
}

model CurrencyRate {
  id           String   @id @default(cuid())
  fromCurrency String
  toCurrency   String
  rate         Decimal
  updatedAt    DateTime @updatedAt

  @@unique([fromCurrency, toCurrency])
  @@map("currency_rates")
}

model ScrapedUrl {
  id          String   @id @default(cuid())
  url         String   @unique
  title       String?
  description String?
  imageUrl    String?
  price       String?
  currency    String?
  scrapedAt   DateTime @default(now())

  @@map("scraped_urls")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  resource   String
  resourceId String?
  metadata   Json?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

enum WishlistPrivacy {
  PUBLIC
  FRIENDS_ONLY
  PRIVATE
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  IGNORED
}

enum OccasionType {
  BIRTHDAY
  CHRISTMAS
  VALENTINES_DAY
  ANNIVERSARY
  GRADUATION
  WEDDING
  CUSTOM
}

enum EntityType {
  USER
  WISHLIST
  FRIENDSHIP
}
